// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int? @map("expires_in")
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription?
  markers Marker[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Plan {
  id                 String  @id @default(cuid())
  title              String
  type               String
  popular            Boolean?
  price_monthly      String?
  price_yearly       String?
  link_monthly       String?
  link_yearly        String?
  features           String[]
  product_id         String?
  variant_id         String[]

  subscription Subscription[]
}

model Subscription {
  id                 String  @id @default(cuid())
  userId             String  @unique
  planId             String
  created_at         DateTime?
  start_date         DateTime?
  expiration_date    DateTime?
  status             String?
  type               String?

  user User @relation(fields: userId, references: id, onDelete: Cascade)
  plan Plan @relation(fields: planId, references: id, onDelete: Cascade)
}


model Marker {
  id                 String  @id @default(cuid())
  userId             String  @unique
  title              String?
  stream_date        DateTime?
  starts_at          Int?
  ends_at            Int?
  created_at         DateTime?
  updated_at         DateTime?
  status             String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

